/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package com.github.bjansen.intellij.pebble;
import com.intellij.lexer.*;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.TokenType;
import static com.github.bjansen.intellij.pebble.psi.PebbleTypes.*;
import com.intellij.util.containers.Stack;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>PebbleLexer.flex</tt>
 */
public class _PebbleLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int IN_TAG = 2;
  public static final int IN_EXPR = 4;
  public static final int IN_VERBATIM = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [7, 7, 7]
   * Total runtime size is 1928 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>14]|((ch>>7)&0x7f)]<<7)|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 68 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\103\200");

  /* The ZZ_CMAP_Y table has 256 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\53\2\1\3\22\2\1\4\37\2\1\3\237\2");

  /* The ZZ_CMAP_A table has 640 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\2\1\1\37\2\1\22\0\1\1\1\45\1\4\1\10\1\0\1\36\1\0\1\5\1\54\1\55\1\51"+
    "\1\46\1\60\1\47\1\6\1\50\12\3\1\53\1\0\1\43\1\42\1\44\1\52\1\0\32\2\1\56\1"+
    "\0\1\57\1\0\1\2\1\0\1\12\1\24\1\20\1\23\1\16\1\31\1\2\1\27\1\32\1\2\1\26\1"+
    "\25\1\34\1\22\1\15\1\21\1\40\1\33\1\17\1\14\1\13\1\35\1\2\1\30\2\2\1\7\1\41"+
    "\1\11\7\0\1\37\32\0\1\37\337\0\1\37\177\0\13\37\35\0\2\37\5\0\1\37\57\0\1"+
    "\37\40\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\2\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\15\4\1\12\1\13\1\14\1\15\1\16"+
    "\1\2\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\11\1\4\1\12\1\1"+
    "\1\32\1\33\1\34\1\0\1\6\1\7\3\4\1\35"+
    "\17\4\1\36\1\4\1\37\3\4\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\4\1\0\1\33\1\5\1\4"+
    "\1\46\11\4\1\47\11\4\1\0\1\33\1\4\1\50"+
    "\4\4\1\37\5\4\1\51\11\4\2\0\1\33\5\4"+
    "\1\52\3\4\1\0\2\4\1\53\4\4\1\0\5\4"+
    "\1\0\1\4\1\54\1\55\7\0\1\56";

  private static int [] zzUnpackAction() {
    int [] result = new int[172];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\61\0\142\0\223\0\304\0\365\0\u0126\0\u0157"+
    "\0\u0188\0\u01b9\0\u01ea\0\u021b\0\u0126\0\u0126\0\u024c\0\u027d"+
    "\0\u02ae\0\u02df\0\u0310\0\u0341\0\u0372\0\u03a3\0\u03d4\0\u0405"+
    "\0\u0436\0\u0467\0\u0498\0\u04c9\0\u0126\0\u04fa\0\u052b\0\u055c"+
    "\0\u058d\0\u0126\0\u0126\0\u0126\0\u0126\0\u0126\0\u0126\0\u0126"+
    "\0\u0126\0\u0126\0\u0126\0\u0126\0\u05be\0\u05ef\0\u0126\0\u0620"+
    "\0\u0126\0\u0651\0\u0126\0\u0682\0\u0126\0\u0126\0\u06b3\0\u06e4"+
    "\0\u0715\0\u0188\0\u0746\0\u0777\0\u07a8\0\u07d9\0\u080a\0\u083b"+
    "\0\u086c\0\u089d\0\u08ce\0\u08ff\0\u0930\0\u0961\0\u0992\0\u09c3"+
    "\0\u09f4\0\u0188\0\u0a25\0\u0188\0\u0a56\0\u0a87\0\u0ab8\0\u0126"+
    "\0\u0126\0\u0126\0\u0126\0\u0126\0\u0126\0\u0ae9\0\u0b1a\0\u0b4b"+
    "\0\u0682\0\u0b7c\0\u0188\0\u0bad\0\u0bde\0\u0c0f\0\u0c40\0\u0c71"+
    "\0\u0ca2\0\u0cd3\0\u0d04\0\u0d35\0\u0188\0\u0d66\0\u0d97\0\u0dc8"+
    "\0\u0df9\0\u0e2a\0\u0e5b\0\u0e8c\0\u0ebd\0\u0eee\0\u0f1f\0\u0f50"+
    "\0\u0f81\0\u0188\0\u0fb2\0\u0fe3\0\u1014\0\u1045\0\u1076\0\u10a7"+
    "\0\u10d8\0\u1109\0\u113a\0\u116b\0\u0188\0\u119c\0\u11cd\0\u11fe"+
    "\0\u122f\0\u1260\0\u1291\0\u12c2\0\u12f3\0\u1324\0\u1355\0\u0f50"+
    "\0\u0126\0\u1386\0\u13b7\0\u13e8\0\u1419\0\u144a\0\u0188\0\u147b"+
    "\0\u14ac\0\u14dd\0\u150e\0\u153f\0\u1570\0\u0188\0\u15a1\0\u15d2"+
    "\0\u1603\0\u1634\0\u1665\0\u1696\0\u16c7\0\u16f8\0\u1729\0\u175a"+
    "\0\u178b\0\u17bc\0\u0188\0\u0188\0\u17ed\0\u181e\0\u184f\0\u1880"+
    "\0\u18b1\0\u18e2\0\u1913\0\u0126";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[172];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\7\5\1\6\51\5\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\7\1\15\1\7\1\16\1\17\1\11\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\11\1\27"+
    "\4\11\1\30\1\31\1\11\1\32\1\33\1\34\1\7"+
    "\1\11\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\7\1\10\1\11\1\12\1\13\1\14\1\7"+
    "\1\15\1\7\1\55\1\17\1\11\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\11\1\27\4\11\1\30"+
    "\1\31\1\11\1\32\1\56\1\57\1\7\1\11\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\7\5"+
    "\1\60\60\5\1\0\51\5\7\0\1\61\1\62\25\0"+
    "\1\63\104\0\1\10\61\0\2\11\6\0\24\11\2\0"+
    "\1\11\23\0\1\12\2\0\1\64\52\0\4\13\1\65"+
    "\54\13\5\14\1\66\53\14\2\0\2\11\6\0\1\11"+
    "\1\67\6\11\1\70\13\11\2\0\1\11\22\0\2\11"+
    "\6\0\21\11\1\71\2\11\2\0\1\11\22\0\2\11"+
    "\6\0\21\11\1\72\2\11\2\0\1\11\22\0\2\11"+
    "\6\0\10\11\1\73\2\11\1\74\2\11\1\75\5\11"+
    "\2\0\1\76\22\0\2\11\6\0\4\11\1\77\17\11"+
    "\2\0\1\11\22\0\2\11\6\0\1\100\2\11\1\101"+
    "\20\11\2\0\1\11\22\0\2\11\6\0\1\102\23\11"+
    "\2\0\1\11\22\0\2\11\6\0\1\11\1\103\1\11"+
    "\1\104\20\11\2\0\1\11\22\0\2\11\6\0\13\11"+
    "\1\105\10\11\2\0\1\11\22\0\2\11\6\0\1\106"+
    "\2\11\1\107\7\11\1\110\4\11\1\111\3\11\2\0"+
    "\1\11\22\0\2\11\6\0\5\11\1\112\2\11\1\113"+
    "\6\11\1\114\2\11\1\115\1\11\2\0\1\11\22\0"+
    "\2\11\6\0\1\116\23\11\2\0\1\11\22\0\2\11"+
    "\6\0\4\11\1\117\17\11\2\0\1\11\31\0\1\120"+
    "\111\0\1\121\60\0\1\122\60\0\1\123\60\0\1\124"+
    "\27\0\1\125\51\0\2\11\6\0\4\11\1\126\17\11"+
    "\2\0\1\11\56\0\1\127\22\0\10\130\1\0\50\130"+
    "\3\0\1\131\57\0\2\11\6\0\2\11\1\132\21\11"+
    "\2\0\1\11\22\0\2\11\6\0\11\11\1\133\12\11"+
    "\2\0\1\11\22\0\2\11\6\0\1\11\1\134\22\11"+
    "\2\0\1\11\22\0\2\11\6\0\11\11\1\135\12\11"+
    "\2\0\1\11\22\0\2\11\6\0\5\11\1\136\16\11"+
    "\2\0\1\11\22\0\2\11\6\0\2\11\1\137\21\11"+
    "\2\0\1\11\22\0\2\11\6\0\1\11\1\140\22\11"+
    "\2\0\1\11\22\0\2\11\6\0\2\11\1\114\21\11"+
    "\2\0\1\11\22\0\2\11\6\0\6\11\1\141\15\11"+
    "\2\0\1\11\22\0\2\11\6\0\10\11\1\142\13\11"+
    "\2\0\1\11\22\0\2\11\6\0\21\11\1\143\2\11"+
    "\2\0\1\11\22\0\2\11\6\0\13\11\1\144\10\11"+
    "\2\0\1\11\22\0\2\11\6\0\2\11\1\145\21\11"+
    "\2\0\1\11\22\0\2\11\6\0\3\11\1\146\20\11"+
    "\2\0\1\11\22\0\2\11\6\0\13\11\1\147\10\11"+
    "\2\0\1\11\22\0\2\11\6\0\21\11\1\114\2\11"+
    "\2\0\1\11\22\0\2\11\6\0\1\11\1\150\22\11"+
    "\2\0\1\11\22\0\2\11\6\0\13\11\1\151\10\11"+
    "\2\0\1\11\22\0\2\11\6\0\6\11\1\152\15\11"+
    "\2\0\1\11\22\0\2\11\6\0\7\11\1\153\14\11"+
    "\2\0\1\11\22\0\2\11\6\0\6\11\1\154\15\11"+
    "\2\0\1\11\22\0\2\11\6\0\21\11\1\155\2\11"+
    "\2\0\1\11\22\0\2\11\6\0\21\11\1\156\2\11"+
    "\2\0\1\11\21\0\1\127\14\0\1\157\20\0\1\127"+
    "\21\0\10\130\1\160\50\130\2\0\2\11\6\0\3\11"+
    "\1\161\20\11\2\0\1\11\22\0\2\11\6\0\4\11"+
    "\1\162\17\11\2\0\1\11\22\0\2\11\6\0\1\163"+
    "\5\11\1\164\1\25\2\11\1\27\4\11\1\165\1\166"+
    "\1\11\1\32\1\56\2\0\1\11\22\0\2\11\6\0"+
    "\4\11\1\167\17\11\2\0\1\11\22\0\2\11\6\0"+
    "\4\11\1\170\17\11\2\0\1\11\22\0\2\11\6\0"+
    "\1\171\23\11\2\0\1\11\22\0\2\11\6\0\15\11"+
    "\1\172\6\11\2\0\1\11\22\0\2\11\6\0\2\11"+
    "\1\173\21\11\2\0\1\11\22\0\2\11\6\0\1\174"+
    "\23\11\2\0\1\11\22\0\2\11\6\0\13\11\1\175"+
    "\10\11\2\0\1\11\22\0\2\11\6\0\6\11\1\176"+
    "\15\11\2\0\1\11\22\0\2\11\6\0\5\11\1\177"+
    "\16\11\2\0\1\11\22\0\2\11\6\0\5\11\1\200"+
    "\16\11\2\0\1\11\22\0\2\11\6\0\2\11\1\201"+
    "\21\11\2\0\1\11\22\0\2\11\6\0\13\11\1\202"+
    "\10\11\2\0\1\11\22\0\2\11\6\0\3\11\1\203"+
    "\20\11\2\0\1\11\22\0\2\11\6\0\21\11\1\204"+
    "\2\11\2\0\1\11\22\0\2\11\6\0\12\11\1\205"+
    "\11\11\2\0\1\11\22\0\2\11\6\0\12\11\1\206"+
    "\11\11\2\0\1\11\42\0\1\207\36\0\10\130\1\210"+
    "\1\211\47\130\2\0\2\11\6\0\4\11\1\212\17\11"+
    "\2\0\1\11\22\0\2\11\6\0\1\11\1\67\22\11"+
    "\2\0\1\11\22\0\2\11\6\0\1\100\23\11\2\0"+
    "\1\11\22\0\2\11\6\0\3\11\1\107\14\11\1\111"+
    "\3\11\2\0\1\11\22\0\2\11\6\0\17\11\1\114"+
    "\4\11\2\0\1\11\22\0\2\11\6\0\20\11\1\166"+
    "\3\11\2\0\1\11\22\0\2\11\6\0\10\11\1\213"+
    "\13\11\2\0\1\11\22\0\2\11\6\0\13\11\1\214"+
    "\10\11\2\0\1\11\22\0\2\11\6\0\4\11\1\114"+
    "\17\11\2\0\1\11\22\0\2\11\6\0\1\215\23\11"+
    "\2\0\1\11\22\0\2\11\6\0\13\11\1\216\10\11"+
    "\2\0\1\11\22\0\2\11\6\0\14\11\1\114\7\11"+
    "\2\0\1\11\22\0\2\11\6\0\4\11\1\217\17\11"+
    "\2\0\1\11\22\0\2\11\6\0\15\11\1\114\6\11"+
    "\2\0\1\11\22\0\2\11\6\0\4\11\1\107\17\11"+
    "\2\0\1\11\22\0\2\11\6\0\1\11\1\220\22\11"+
    "\2\0\1\11\22\0\2\11\6\0\21\11\1\77\2\11"+
    "\2\0\1\11\22\0\2\11\6\0\3\11\1\114\20\11"+
    "\2\0\1\11\22\0\2\11\6\0\1\221\23\11\2\0"+
    "\1\11\22\0\2\11\6\0\1\222\23\11\2\0\1\11"+
    "\43\0\1\223\37\0\2\11\6\0\5\11\1\224\16\11"+
    "\2\0\1\11\22\0\2\11\6\0\11\11\1\225\12\11"+
    "\2\0\1\11\22\0\2\11\6\0\5\11\1\226\16\11"+
    "\2\0\1\11\22\0\2\11\6\0\20\11\1\227\3\11"+
    "\2\0\1\11\22\0\2\11\6\0\13\11\1\230\10\11"+
    "\2\0\1\11\22\0\2\11\6\0\11\11\1\172\12\11"+
    "\2\0\1\11\22\0\2\11\6\0\2\11\1\231\21\11"+
    "\2\0\1\11\22\0\2\11\6\0\2\11\1\232\21\11"+
    "\2\0\1\11\55\0\1\233\25\0\2\11\6\0\6\11"+
    "\1\234\15\11\2\0\1\11\22\0\2\11\6\0\5\11"+
    "\1\114\16\11\2\0\1\11\22\0\2\11\6\0\10\11"+
    "\1\235\13\11\2\0\1\11\22\0\2\11\6\0\4\11"+
    "\1\236\17\11\2\0\1\11\22\0\2\11\6\0\20\11"+
    "\1\237\3\11\2\0\1\11\22\0\2\11\6\0\20\11"+
    "\1\240\3\11\2\0\1\11\36\0\1\241\44\0\2\11"+
    "\6\0\1\242\23\11\2\0\1\11\22\0\2\11\6\0"+
    "\5\11\1\243\16\11\2\0\1\11\22\0\2\11\6\0"+
    "\13\11\1\114\10\11\2\0\1\11\22\0\2\11\6\0"+
    "\22\11\1\244\1\11\2\0\1\11\22\0\2\11\6\0"+
    "\22\11\1\114\1\11\2\0\1\11\53\0\1\245\27\0"+
    "\2\11\6\0\7\11\1\172\14\11\2\0\1\11\44\0"+
    "\1\246\46\0\1\247\62\0\1\250\76\0\1\251\62\0"+
    "\1\252\25\0\1\252\34\0\1\253\1\252\32\0\1\254"+
    "\47\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6468];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\2\1\1\11\5\1\2\11\16\1\1\11\4\1"+
    "\13\11\2\1\1\11\1\1\1\11\1\1\1\11\1\0"+
    "\2\11\31\1\6\11\1\1\1\0\27\1\1\0\27\1"+
    "\2\0\1\11\11\1\1\0\7\1\1\0\5\1\1\0"+
    "\3\1\7\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[172];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _PebbleLexer() {
    this((java.io.Reader)null);
  }

  public IElementType checkContent() {
      if (!yytext().toString().equals("")) {
          if (yytext().toString().trim().length() == 0) {
              return TokenType.WHITE_SPACE;
          } else {
              return CONTENT;
          }
      }
      return null;
  }


  private Stack<Integer> stack = new Stack<>();

  public void yypushstate(int newState) {
      stack.push(yystate());
      yybegin(newState);
  }

  public void yypopstate() {
      yybegin(stack.pop());
  }

  public void yycleanstates() {
      while(!stack.isEmpty()) {
          yybegin(stack.pop());
      }
  }

  private boolean isVerbatim = false;
  private boolean isFirstNameInTag = false;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _PebbleLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return CONTENT;
            }
          case 47: break;
          case 2: 
            { return TokenType.BAD_CHARACTER;
            }
          case 48: break;
          case 3: 
            { return com.intellij.psi.TokenType.WHITE_SPACE;
            }
          case 49: break;
          case 4: 
            { if (isFirstNameInTag) {
                               isFirstNameInTag = false;
                               return CUSTOM_TAG_NAME;
                           }
                           isFirstNameInTag = false;
                           return ID_NAME;
            }
          case 50: break;
          case 5: 
            { return NUMERIC;
            }
          case 51: break;
          case 6: 
            { return STRING;
            }
          case 52: break;
          case 7: 
            { return SINGLE_QUOTED_STRING;
            }
          case 53: break;
          case 8: 
            { return LBRACE;
            }
          case 54: break;
          case 9: 
            { return RBRACE;
            }
          case 55: break;
          case 10: 
            { return OP_MOD;
            }
          case 56: break;
          case 11: 
            { return OP_PIPE;
            }
          case 57: break;
          case 12: 
            { return OP_ASSIGN;
            }
          case 58: break;
          case 13: 
            { return OP_LT;
            }
          case 59: break;
          case 14: 
            { return OP_GT;
            }
          case 60: break;
          case 15: 
            { return OP_PLUS;
            }
          case 61: break;
          case 16: 
            { return OP_MINUS;
            }
          case 62: break;
          case 17: 
            { return OP_DIV;
            }
          case 63: break;
          case 18: 
            { return OP_MULT;
            }
          case 64: break;
          case 19: 
            { return OP_TERNARY;
            }
          case 65: break;
          case 20: 
            { return OP_COLON;
            }
          case 66: break;
          case 21: 
            { return LPAREN;
            }
          case 67: break;
          case 22: 
            { return RPAREN;
            }
          case 68: break;
          case 23: 
            { return LBRACKET;
            }
          case 69: break;
          case 24: 
            { return RBRACKET;
            }
          case 70: break;
          case 25: 
            { return COMMA;
            }
          case 71: break;
          case 26: 
            { yypushstate(IN_EXPR); return VAR_OPEN;
            }
          case 72: break;
          case 27: 
            { return COMMENT;
            }
          case 73: break;
          case 28: 
            { yypushstate(IN_TAG); isFirstNameInTag = true; return TAG_OPEN;
            }
          case 74: break;
          case 29: 
            { return OR;
            }
          case 75: break;
          case 30: 
            { return IS;
            }
          case 76: break;
          case 31: 
            { isFirstNameInTag = false; return ID_NAME;
            }
          case 77: break;
          case 32: 
            { yypopstate();
                           if (isVerbatim) {
                              yypushstate(IN_VERBATIM);
                           }
                           return TAG_CLOSE;
            }
          case 78: break;
          case 33: 
            { return OP_EQ;
            }
          case 79: break;
          case 34: 
            { return OP_LE;
            }
          case 80: break;
          case 35: 
            { return OP_GE;
            }
          case 81: break;
          case 36: 
            { return OP_NEQ;
            }
          case 82: break;
          case 37: 
            { yypopstate(); return VAR_CLOSE;
            }
          case 83: break;
          case 38: 
            { return AND;
            }
          case 84: break;
          case 39: 
            { return NOT;
            }
          case 85: break;
          case 40: 
            { return TRUE;
            }
          case 86: break;
          case 41: 
            { return NULL;
            }
          case 87: break;
          case 42: 
            { return FALSE;
            }
          case 88: break;
          case 43: 
            { return EQUALS;
            }
          case 89: break;
          case 44: 
            { return CONTAINS;
            }
          case 90: break;
          case 45: 
            { if (isFirstNameInTag) {
                             isVerbatim = true;
                           }
                           isFirstNameInTag = false;
                           return ID_NAME;
            }
          case 91: break;
          case 46: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 2);
            { yypopstate();
                           yypushstate(IN_TAG);
                           isVerbatim = false;
                           return TAG_OPEN;
            }
          case 92: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
